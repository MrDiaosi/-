元字符
    \b 代表单词的开头或结尾，也就是单词的分界处
    . 除了换行符以外的任意一个字符
    \d 匹配任意一位数字   0\d{3}-\d{8}匹配电话号码 \d{5,12}匹配不少于5个不多于12个的数字
    \w	匹配字母或数字或下划线或汉字
    \s	匹配任意的空白符
    ^	匹配字符串的开始
    $	匹配字符串的结束
    * 代表其前面的那个字符可以重复任意次
    + 代表前面的那个字符可以重复1次及以上
限定符：重复
    ? 重复零次或一次
    * 重复任意次
    + 重复一次及以上
    {n} 重复n次
    {n,} 重复n次及以上
    {n,m} 重复不少于n次不多于m次
字符类       
    [aoeiu]匹配任意一个aoeiu字母
    [0-9] 与\d意思一样，匹配任意一位数字
    [0-9A-Za-z] 不考虑中文，与\w意思一样，匹配任意一位字符
    例子：\(?0\d{2}[)-]?\d{8} 先是一次或零次（ 然后一个0 然后两个数字 然后 一个或零个 )或- 然后是八个数字
                             即可以匹配类似（010）12345678 010-12345678 01012345678的电话号码
分枝条件：用|把不同的规则分隔开。有几种规则，如果满足其中任意一种规则都应该当成匹配
    0\d{2}-\d{8}|0\d{3}-\d{8} 匹配三位或四位区号的电话号码
    \(?0\d{2}\)?[-]?\d{8}|0\d{2}[-]?\d{8} 匹配有无小括号或连字号的电话号码
   PS:分枝条件的匹配规则是从左到右，如果某个规则匹配后则不再匹配下一个规则
分组：用小括号来指定子表达式
    (\d{1,3}\.){3}\d{1,3}  小括号中数字与点的组合重复三次后面跟个数字，匹配一个ipv4地址
     上面的正则表达式也匹配888.888.888.88这种不存在的ip地址，因此正确的做法是
    (2[0-4]\d|25[0-5]|[01]?\d\d?)\.){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)
反义：即不匹配某位
      \W	匹配任意不是字母，数字，下划线，汉字的字符
      \S	匹配任意不是空白符的字符
      \D	匹配任意非数字的字符
      \B	匹配不是单词开头或结束的位置
      [^x]	匹配除了x以外的任意字符
      [^aeiou]	匹配除了aeiou这几个字母以外的任意字符
      <a[^>]+>匹配用尖括号括起来的以a开头的字符串
向后引用
    
   
   
    
    
                             
    
    
